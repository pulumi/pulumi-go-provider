{
  "name": "str",
  "displayName": "yourdisplayname",
  "version": "0.1.0",
  "namespace": "examples",
  "meta": {
    "moduleFormat": "(.*)"
  },
  "language": {
    "csharp": {
      "respectSchemaVersion": true
    },
    "go": {
      "generateResourceContainerTypes": true,
      "importBasePath": "github.com/examples/yourdisplayname/sdk/go/yourdisplayname",
      "respectSchemaVersion": true
    },
    "nodejs": {
      "respectSchemaVersion": true
    },
    "python": {
      "pyproject": {
        "enabled": true
      },
      "respectSchemaVersion": true
    }
  },
  "config": {},
  "provider": {
    "type": "object"
  },
  "functions": {
    "str:index:giveMeAString": {
      "description": "Return a string, withing any inputs",
      "inputs": {
        "type": "object"
      },
      "outputs": {
        "properties": {
          "out": {
            "type": "string"
          }
        },
        "required": [
          "out"
        ],
        "type": "object"
      }
    },
    "str:index:print": {
      "description": "Print to stdout",
      "inputs": {
        "properties": {
          "s": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "s"
        ]
      },
      "outputs": {
        "additionalProperties": {
          "type": "string"
        },
        "type": "object"
      }
    },
    "str:index:replace": {
      "description": "Replace returns a copy of the string s with all\nnon-overlapping instances of old replaced by new.\nIf old is empty, it matches at the beginning of the string\nand after each UTF-8 sequence, yielding up to k+1 replacements\nfor a k-rune string.",
      "inputs": {
        "properties": {
          "new": {
            "type": "string",
            "description": "The string to replace `Old` with."
          },
          "old": {
            "type": "string",
            "description": "The string to replace."
          },
          "s": {
            "type": "string",
            "description": "The string where the replacement takes place."
          }
        },
        "type": "object",
        "required": [
          "new",
          "old",
          "s"
        ]
      },
      "outputs": {
        "properties": {
          "out": {
            "type": "string"
          }
        },
        "required": [
          "out"
        ],
        "type": "object"
      }
    },
    "str:regex:replace": {
      "description": "Replace returns a copy of `s`, replacing matches of the `old`\nwith the replacement string `new`.",
      "inputs": {
        "properties": {
          "new": {
            "type": "string"
          },
          "pattern": {
            "type": "string"
          },
          "s": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "new",
          "pattern",
          "s"
        ]
      },
      "outputs": {
        "properties": {
          "out": {
            "type": "string"
          }
        },
        "required": [
          "out"
        ],
        "type": "object"
      }
    }
  }
}
