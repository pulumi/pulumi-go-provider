// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package randomlogin

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-go-provider/examples/random-login/sdk/go/randomlogin/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RandomSalt struct {
	pulumi.CustomResourceState

	Password       pulumi.StringOutput `pulumi:"password"`
	Salt           pulumi.StringOutput `pulumi:"salt"`
	SaltedLength   pulumi.IntPtrOutput `pulumi:"saltedLength"`
	SaltedPassword pulumi.StringOutput `pulumi:"saltedPassword"`
}

// NewRandomSalt registers a new resource with the given unique name, arguments, and options.
func NewRandomSalt(ctx *pulumi.Context,
	name string, args *RandomSaltArgs, opts ...pulumi.ResourceOption) (*RandomSalt, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RandomSalt
	err := ctx.RegisterResource("random-login:index:RandomSalt", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRandomSalt gets an existing RandomSalt resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRandomSalt(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RandomSaltState, opts ...pulumi.ResourceOption) (*RandomSalt, error) {
	var resource RandomSalt
	err := ctx.ReadResource("random-login:index:RandomSalt", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RandomSalt resources.
type randomSaltState struct {
}

type RandomSaltState struct {
}

func (RandomSaltState) ElementType() reflect.Type {
	return reflect.TypeOf((*randomSaltState)(nil)).Elem()
}

type randomSaltArgs struct {
	Password     string `pulumi:"password"`
	SaltedLength *int   `pulumi:"saltedLength"`
}

// The set of arguments for constructing a RandomSalt resource.
type RandomSaltArgs struct {
	Password     pulumi.StringInput
	SaltedLength pulumi.IntPtrInput
}

func (RandomSaltArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*randomSaltArgs)(nil)).Elem()
}

type RandomSaltInput interface {
	pulumi.Input

	ToRandomSaltOutput() RandomSaltOutput
	ToRandomSaltOutputWithContext(ctx context.Context) RandomSaltOutput
}

func (*RandomSalt) ElementType() reflect.Type {
	return reflect.TypeOf((**RandomSalt)(nil)).Elem()
}

func (i *RandomSalt) ToRandomSaltOutput() RandomSaltOutput {
	return i.ToRandomSaltOutputWithContext(context.Background())
}

func (i *RandomSalt) ToRandomSaltOutputWithContext(ctx context.Context) RandomSaltOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RandomSaltOutput)
}

// RandomSaltArrayInput is an input type that accepts RandomSaltArray and RandomSaltArrayOutput values.
// You can construct a concrete instance of `RandomSaltArrayInput` via:
//
//	RandomSaltArray{ RandomSaltArgs{...} }
type RandomSaltArrayInput interface {
	pulumi.Input

	ToRandomSaltArrayOutput() RandomSaltArrayOutput
	ToRandomSaltArrayOutputWithContext(context.Context) RandomSaltArrayOutput
}

type RandomSaltArray []RandomSaltInput

func (RandomSaltArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RandomSalt)(nil)).Elem()
}

func (i RandomSaltArray) ToRandomSaltArrayOutput() RandomSaltArrayOutput {
	return i.ToRandomSaltArrayOutputWithContext(context.Background())
}

func (i RandomSaltArray) ToRandomSaltArrayOutputWithContext(ctx context.Context) RandomSaltArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RandomSaltArrayOutput)
}

// RandomSaltMapInput is an input type that accepts RandomSaltMap and RandomSaltMapOutput values.
// You can construct a concrete instance of `RandomSaltMapInput` via:
//
//	RandomSaltMap{ "key": RandomSaltArgs{...} }
type RandomSaltMapInput interface {
	pulumi.Input

	ToRandomSaltMapOutput() RandomSaltMapOutput
	ToRandomSaltMapOutputWithContext(context.Context) RandomSaltMapOutput
}

type RandomSaltMap map[string]RandomSaltInput

func (RandomSaltMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RandomSalt)(nil)).Elem()
}

func (i RandomSaltMap) ToRandomSaltMapOutput() RandomSaltMapOutput {
	return i.ToRandomSaltMapOutputWithContext(context.Background())
}

func (i RandomSaltMap) ToRandomSaltMapOutputWithContext(ctx context.Context) RandomSaltMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RandomSaltMapOutput)
}

type RandomSaltOutput struct{ *pulumi.OutputState }

func (RandomSaltOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RandomSalt)(nil)).Elem()
}

func (o RandomSaltOutput) ToRandomSaltOutput() RandomSaltOutput {
	return o
}

func (o RandomSaltOutput) ToRandomSaltOutputWithContext(ctx context.Context) RandomSaltOutput {
	return o
}

func (o RandomSaltOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *RandomSalt) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

func (o RandomSaltOutput) Salt() pulumi.StringOutput {
	return o.ApplyT(func(v *RandomSalt) pulumi.StringOutput { return v.Salt }).(pulumi.StringOutput)
}

func (o RandomSaltOutput) SaltedLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RandomSalt) pulumi.IntPtrOutput { return v.SaltedLength }).(pulumi.IntPtrOutput)
}

func (o RandomSaltOutput) SaltedPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *RandomSalt) pulumi.StringOutput { return v.SaltedPassword }).(pulumi.StringOutput)
}

type RandomSaltArrayOutput struct{ *pulumi.OutputState }

func (RandomSaltArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RandomSalt)(nil)).Elem()
}

func (o RandomSaltArrayOutput) ToRandomSaltArrayOutput() RandomSaltArrayOutput {
	return o
}

func (o RandomSaltArrayOutput) ToRandomSaltArrayOutputWithContext(ctx context.Context) RandomSaltArrayOutput {
	return o
}

func (o RandomSaltArrayOutput) Index(i pulumi.IntInput) RandomSaltOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RandomSalt {
		return vs[0].([]*RandomSalt)[vs[1].(int)]
	}).(RandomSaltOutput)
}

type RandomSaltMapOutput struct{ *pulumi.OutputState }

func (RandomSaltMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RandomSalt)(nil)).Elem()
}

func (o RandomSaltMapOutput) ToRandomSaltMapOutput() RandomSaltMapOutput {
	return o
}

func (o RandomSaltMapOutput) ToRandomSaltMapOutputWithContext(ctx context.Context) RandomSaltMapOutput {
	return o
}

func (o RandomSaltMapOutput) MapIndex(k pulumi.StringInput) RandomSaltOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RandomSalt {
		return vs[0].(map[string]*RandomSalt)[vs[1].(string)]
	}).(RandomSaltOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RandomSaltInput)(nil)).Elem(), &RandomSalt{})
	pulumi.RegisterInputType(reflect.TypeOf((*RandomSaltArrayInput)(nil)).Elem(), RandomSaltArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RandomSaltMapInput)(nil)).Elem(), RandomSaltMap{})
	pulumi.RegisterOutputType(RandomSaltOutput{})
	pulumi.RegisterOutputType(RandomSaltArrayOutput{})
	pulumi.RegisterOutputType(RandomSaltMapOutput{})
}
