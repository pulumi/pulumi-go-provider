// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package randomlogin

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-go-provider/examples/random-login/sdk/go/randomlogin/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// UsernameIsUnique checks whether the passed username exists in the (imaginary) database
func UsernameIsUnique(ctx *pulumi.Context, args *UsernameIsUniqueArgs, opts ...pulumi.InvokeOption) (*UsernameIsUniqueResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv UsernameIsUniqueResult
	err := ctx.Invoke("random-login:index:usernameIsUnique", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type UsernameIsUniqueArgs struct {
	Username string `pulumi:"username"`
}

type UsernameIsUniqueResult struct {
	IsUnique bool `pulumi:"isUnique"`
}

func UsernameIsUniqueOutput(ctx *pulumi.Context, args UsernameIsUniqueOutputArgs, opts ...pulumi.InvokeOption) UsernameIsUniqueResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (UsernameIsUniqueResultOutput, error) {
			args := v.(UsernameIsUniqueArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("random-login:index:usernameIsUnique", args, UsernameIsUniqueResultOutput{}, options).(UsernameIsUniqueResultOutput), nil
		}).(UsernameIsUniqueResultOutput)
}

type UsernameIsUniqueOutputArgs struct {
	Username pulumi.StringInput `pulumi:"username"`
}

func (UsernameIsUniqueOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UsernameIsUniqueArgs)(nil)).Elem()
}

type UsernameIsUniqueResultOutput struct{ *pulumi.OutputState }

func (UsernameIsUniqueResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsernameIsUniqueResult)(nil)).Elem()
}

func (o UsernameIsUniqueResultOutput) ToUsernameIsUniqueResultOutput() UsernameIsUniqueResultOutput {
	return o
}

func (o UsernameIsUniqueResultOutput) ToUsernameIsUniqueResultOutputWithContext(ctx context.Context) UsernameIsUniqueResultOutput {
	return o
}

func (o UsernameIsUniqueResultOutput) IsUnique() pulumi.BoolOutput {
	return o.ApplyT(func(v UsernameIsUniqueResult) bool { return v.IsUnique }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(UsernameIsUniqueResultOutput{})
}
