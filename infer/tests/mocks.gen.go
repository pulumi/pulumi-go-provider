// Copyright 2025, Pulumi Corporation.  All rights reserved.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pulumi/pulumi-go-provider/infer/tests (interfaces: TestConfig,TestResource,TestFunction,TestComponent,TestHost)
//
// Generated by this command:
//
//	mockgen -typed -package tests -destination mocks.gen.go -write_generate_directive -imports goprovider=github.com/pulumi/pulumi-go-provider,pprovider=github.com/pulumi/pulumi/sdk/v3/go/pulumi/provider . TestConfig,TestResource,TestFunction,TestComponent,TestHost
//

// Package tests is a generated GoMock package.
package tests

import (
	context "context"
	reflect "reflect"

	goprovider "github.com/pulumi/pulumi-go-provider"
	infer "github.com/pulumi/pulumi-go-provider/infer"
	pulumi "github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	pprovider "github.com/pulumi/pulumi/sdk/v3/go/pulumi/provider"
	gomock "go.uber.org/mock/gomock"
)

//go:generate mockgen -typed -package tests -destination mocks.gen.go -write_generate_directive -imports goprovider=github.com/pulumi/pulumi-go-provider,pprovider=github.com/pulumi/pulumi/sdk/v3/go/pulumi/provider . TestConfig,TestResource,TestFunction,TestComponent,TestHost

// MockTestConfig is a mock of TestConfig interface.
type MockTestConfig struct {
	ctrl     *gomock.Controller
	recorder *MockTestConfigMockRecorder
	isgomock struct{}
}

// MockTestConfigMockRecorder is the mock recorder for MockTestConfig.
type MockTestConfigMockRecorder struct {
	mock *MockTestConfig
}

// NewMockTestConfig creates a new mock instance.
func NewMockTestConfig(ctrl *gomock.Controller) *MockTestConfig {
	mock := &MockTestConfig{ctrl: ctrl}
	mock.recorder = &MockTestConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestConfig) EXPECT() *MockTestConfigMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockTestConfig) Check(ctx context.Context, req infer.CheckRequest) (infer.CheckResponse[*MockTestConfig], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx, req)
	ret0, _ := ret[0].(infer.CheckResponse[*MockTestConfig])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockTestConfigMockRecorder) Check(ctx, req any) *MockTestConfigCheckCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockTestConfig)(nil).Check), ctx, req)
	return &MockTestConfigCheckCall{Call: call}
}

// MockTestConfigCheckCall wrap *gomock.Call
type MockTestConfigCheckCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestConfigCheckCall) Return(arg0 infer.CheckResponse[*MockTestConfig], arg1 error) *MockTestConfigCheckCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestConfigCheckCall) Do(f func(context.Context, infer.CheckRequest) (infer.CheckResponse[*MockTestConfig], error)) *MockTestConfigCheckCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestConfigCheckCall) DoAndReturn(f func(context.Context, infer.CheckRequest) (infer.CheckResponse[*MockTestConfig], error)) *MockTestConfigCheckCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Configure mocks base method.
func (m *MockTestConfig) Configure(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Configure indicates an expected call of Configure.
func (mr *MockTestConfigMockRecorder) Configure(ctx any) *MockTestConfigConfigureCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockTestConfig)(nil).Configure), ctx)
	return &MockTestConfigConfigureCall{Call: call}
}

// MockTestConfigConfigureCall wrap *gomock.Call
type MockTestConfigConfigureCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestConfigConfigureCall) Return(arg0 error) *MockTestConfigConfigureCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestConfigConfigureCall) Do(f func(context.Context) error) *MockTestConfigConfigureCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestConfigConfigureCall) DoAndReturn(f func(context.Context) error) *MockTestConfigConfigureCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTestResource is a mock of TestResource interface.
type MockTestResource[I any, O any] struct {
	ctrl     *gomock.Controller
	recorder *MockTestResourceMockRecorder[I, O]
	isgomock struct{}
}

// MockTestResourceMockRecorder is the mock recorder for MockTestResource.
type MockTestResourceMockRecorder[I any, O any] struct {
	mock *MockTestResource[I, O]
}

// NewMockTestResource creates a new mock instance.
func NewMockTestResource[I any, O any](ctrl *gomock.Controller) *MockTestResource[I, O] {
	mock := &MockTestResource[I, O]{ctrl: ctrl}
	mock.recorder = &MockTestResourceMockRecorder[I, O]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestResource[I, O]) EXPECT() *MockTestResourceMockRecorder[I, O] {
	return m.recorder
}

// Annotate mocks base method.
func (m *MockTestResource[I, O]) Annotate(arg0 infer.Annotator) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Annotate", arg0)
}

// Annotate indicates an expected call of Annotate.
func (mr *MockTestResourceMockRecorder[I, O]) Annotate(arg0 any) *MockTestResourceAnnotateCall[I, O] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Annotate", reflect.TypeOf((*MockTestResource[I, O])(nil).Annotate), arg0)
	return &MockTestResourceAnnotateCall[I, O]{Call: call}
}

// MockTestResourceAnnotateCall wrap *gomock.Call
type MockTestResourceAnnotateCall[I any, O any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestResourceAnnotateCall[I, O]) Return() *MockTestResourceAnnotateCall[I, O] {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestResourceAnnotateCall[I, O]) Do(f func(infer.Annotator)) *MockTestResourceAnnotateCall[I, O] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestResourceAnnotateCall[I, O]) DoAndReturn(f func(infer.Annotator)) *MockTestResourceAnnotateCall[I, O] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Check mocks base method.
func (m *MockTestResource[I, O]) Check(ctx context.Context, req infer.CheckRequest) (infer.CheckResponse[I], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx, req)
	ret0, _ := ret[0].(infer.CheckResponse[I])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockTestResourceMockRecorder[I, O]) Check(ctx, req any) *MockTestResourceCheckCall[I, O] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockTestResource[I, O])(nil).Check), ctx, req)
	return &MockTestResourceCheckCall[I, O]{Call: call}
}

// MockTestResourceCheckCall wrap *gomock.Call
type MockTestResourceCheckCall[I any, O any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestResourceCheckCall[I, O]) Return(arg0 infer.CheckResponse[I], arg1 error) *MockTestResourceCheckCall[I, O] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestResourceCheckCall[I, O]) Do(f func(context.Context, infer.CheckRequest) (infer.CheckResponse[I], error)) *MockTestResourceCheckCall[I, O] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestResourceCheckCall[I, O]) DoAndReturn(f func(context.Context, infer.CheckRequest) (infer.CheckResponse[I], error)) *MockTestResourceCheckCall[I, O] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockTestResource[I, O]) Create(ctx context.Context, req infer.CreateRequest[I]) (infer.CreateResponse[O], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req)
	ret0, _ := ret[0].(infer.CreateResponse[O])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTestResourceMockRecorder[I, O]) Create(ctx, req any) *MockTestResourceCreateCall[I, O] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTestResource[I, O])(nil).Create), ctx, req)
	return &MockTestResourceCreateCall[I, O]{Call: call}
}

// MockTestResourceCreateCall wrap *gomock.Call
type MockTestResourceCreateCall[I any, O any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestResourceCreateCall[I, O]) Return(arg0 infer.CreateResponse[O], arg1 error) *MockTestResourceCreateCall[I, O] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestResourceCreateCall[I, O]) Do(f func(context.Context, infer.CreateRequest[I]) (infer.CreateResponse[O], error)) *MockTestResourceCreateCall[I, O] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestResourceCreateCall[I, O]) DoAndReturn(f func(context.Context, infer.CreateRequest[I]) (infer.CreateResponse[O], error)) *MockTestResourceCreateCall[I, O] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockTestResource[I, O]) Delete(ctx context.Context, req infer.DeleteRequest[O]) (infer.DeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, req)
	ret0, _ := ret[0].(infer.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockTestResourceMockRecorder[I, O]) Delete(ctx, req any) *MockTestResourceDeleteCall[I, O] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTestResource[I, O])(nil).Delete), ctx, req)
	return &MockTestResourceDeleteCall[I, O]{Call: call}
}

// MockTestResourceDeleteCall wrap *gomock.Call
type MockTestResourceDeleteCall[I any, O any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestResourceDeleteCall[I, O]) Return(arg0 infer.DeleteResponse, arg1 error) *MockTestResourceDeleteCall[I, O] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestResourceDeleteCall[I, O]) Do(f func(context.Context, infer.DeleteRequest[O]) (infer.DeleteResponse, error)) *MockTestResourceDeleteCall[I, O] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestResourceDeleteCall[I, O]) DoAndReturn(f func(context.Context, infer.DeleteRequest[O]) (infer.DeleteResponse, error)) *MockTestResourceDeleteCall[I, O] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Diff mocks base method.
func (m *MockTestResource[I, O]) Diff(ctx context.Context, req infer.DiffRequest[I, O]) (infer.DiffResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Diff", ctx, req)
	ret0, _ := ret[0].(infer.DiffResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Diff indicates an expected call of Diff.
func (mr *MockTestResourceMockRecorder[I, O]) Diff(ctx, req any) *MockTestResourceDiffCall[I, O] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Diff", reflect.TypeOf((*MockTestResource[I, O])(nil).Diff), ctx, req)
	return &MockTestResourceDiffCall[I, O]{Call: call}
}

// MockTestResourceDiffCall wrap *gomock.Call
type MockTestResourceDiffCall[I any, O any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestResourceDiffCall[I, O]) Return(arg0 infer.DiffResponse, arg1 error) *MockTestResourceDiffCall[I, O] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestResourceDiffCall[I, O]) Do(f func(context.Context, infer.DiffRequest[I, O]) (infer.DiffResponse, error)) *MockTestResourceDiffCall[I, O] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestResourceDiffCall[I, O]) DoAndReturn(f func(context.Context, infer.DiffRequest[I, O]) (infer.DiffResponse, error)) *MockTestResourceDiffCall[I, O] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Read mocks base method.
func (m *MockTestResource[I, O]) Read(ctx context.Context, req infer.ReadRequest[I, O]) (infer.ReadResponse[I, O], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, req)
	ret0, _ := ret[0].(infer.ReadResponse[I, O])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockTestResourceMockRecorder[I, O]) Read(ctx, req any) *MockTestResourceReadCall[I, O] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTestResource[I, O])(nil).Read), ctx, req)
	return &MockTestResourceReadCall[I, O]{Call: call}
}

// MockTestResourceReadCall wrap *gomock.Call
type MockTestResourceReadCall[I any, O any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestResourceReadCall[I, O]) Return(arg0 infer.ReadResponse[I, O], arg1 error) *MockTestResourceReadCall[I, O] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestResourceReadCall[I, O]) Do(f func(context.Context, infer.ReadRequest[I, O]) (infer.ReadResponse[I, O], error)) *MockTestResourceReadCall[I, O] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestResourceReadCall[I, O]) DoAndReturn(f func(context.Context, infer.ReadRequest[I, O]) (infer.ReadResponse[I, O], error)) *MockTestResourceReadCall[I, O] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockTestResource[I, O]) Update(ctx context.Context, req infer.UpdateRequest[I, O]) (infer.UpdateResponse[O], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, req)
	ret0, _ := ret[0].(infer.UpdateResponse[O])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTestResourceMockRecorder[I, O]) Update(ctx, req any) *MockTestResourceUpdateCall[I, O] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTestResource[I, O])(nil).Update), ctx, req)
	return &MockTestResourceUpdateCall[I, O]{Call: call}
}

// MockTestResourceUpdateCall wrap *gomock.Call
type MockTestResourceUpdateCall[I any, O any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestResourceUpdateCall[I, O]) Return(arg0 infer.UpdateResponse[O], arg1 error) *MockTestResourceUpdateCall[I, O] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestResourceUpdateCall[I, O]) Do(f func(context.Context, infer.UpdateRequest[I, O]) (infer.UpdateResponse[O], error)) *MockTestResourceUpdateCall[I, O] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestResourceUpdateCall[I, O]) DoAndReturn(f func(context.Context, infer.UpdateRequest[I, O]) (infer.UpdateResponse[O], error)) *MockTestResourceUpdateCall[I, O] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTestFunction is a mock of TestFunction interface.
type MockTestFunction[I any, O any] struct {
	ctrl     *gomock.Controller
	recorder *MockTestFunctionMockRecorder[I, O]
	isgomock struct{}
}

// MockTestFunctionMockRecorder is the mock recorder for MockTestFunction.
type MockTestFunctionMockRecorder[I any, O any] struct {
	mock *MockTestFunction[I, O]
}

// NewMockTestFunction creates a new mock instance.
func NewMockTestFunction[I any, O any](ctrl *gomock.Controller) *MockTestFunction[I, O] {
	mock := &MockTestFunction[I, O]{ctrl: ctrl}
	mock.recorder = &MockTestFunctionMockRecorder[I, O]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestFunction[I, O]) EXPECT() *MockTestFunctionMockRecorder[I, O] {
	return m.recorder
}

// Annotate mocks base method.
func (m *MockTestFunction[I, O]) Annotate(arg0 infer.Annotator) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Annotate", arg0)
}

// Annotate indicates an expected call of Annotate.
func (mr *MockTestFunctionMockRecorder[I, O]) Annotate(arg0 any) *MockTestFunctionAnnotateCall[I, O] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Annotate", reflect.TypeOf((*MockTestFunction[I, O])(nil).Annotate), arg0)
	return &MockTestFunctionAnnotateCall[I, O]{Call: call}
}

// MockTestFunctionAnnotateCall wrap *gomock.Call
type MockTestFunctionAnnotateCall[I any, O any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestFunctionAnnotateCall[I, O]) Return() *MockTestFunctionAnnotateCall[I, O] {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestFunctionAnnotateCall[I, O]) Do(f func(infer.Annotator)) *MockTestFunctionAnnotateCall[I, O] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestFunctionAnnotateCall[I, O]) DoAndReturn(f func(infer.Annotator)) *MockTestFunctionAnnotateCall[I, O] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Invoke mocks base method.
func (m *MockTestFunction[I, O]) Invoke(ctx context.Context, req infer.FunctionRequest[I]) (infer.FunctionResponse[O], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invoke", ctx, req)
	ret0, _ := ret[0].(infer.FunctionResponse[O])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Invoke indicates an expected call of Invoke.
func (mr *MockTestFunctionMockRecorder[I, O]) Invoke(ctx, req any) *MockTestFunctionInvokeCall[I, O] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockTestFunction[I, O])(nil).Invoke), ctx, req)
	return &MockTestFunctionInvokeCall[I, O]{Call: call}
}

// MockTestFunctionInvokeCall wrap *gomock.Call
type MockTestFunctionInvokeCall[I any, O any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestFunctionInvokeCall[I, O]) Return(resp infer.FunctionResponse[O], err error) *MockTestFunctionInvokeCall[I, O] {
	c.Call = c.Call.Return(resp, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestFunctionInvokeCall[I, O]) Do(f func(context.Context, infer.FunctionRequest[I]) (infer.FunctionResponse[O], error)) *MockTestFunctionInvokeCall[I, O] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestFunctionInvokeCall[I, O]) DoAndReturn(f func(context.Context, infer.FunctionRequest[I]) (infer.FunctionResponse[O], error)) *MockTestFunctionInvokeCall[I, O] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTestComponent is a mock of TestComponent interface.
type MockTestComponent[I any, O pulumi.ComponentResource] struct {
	ctrl     *gomock.Controller
	recorder *MockTestComponentMockRecorder[I, O]
	isgomock struct{}
}

// MockTestComponentMockRecorder is the mock recorder for MockTestComponent.
type MockTestComponentMockRecorder[I any, O pulumi.ComponentResource] struct {
	mock *MockTestComponent[I, O]
}

// NewMockTestComponent creates a new mock instance.
func NewMockTestComponent[I any, O pulumi.ComponentResource](ctrl *gomock.Controller) *MockTestComponent[I, O] {
	mock := &MockTestComponent[I, O]{ctrl: ctrl}
	mock.recorder = &MockTestComponentMockRecorder[I, O]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestComponent[I, O]) EXPECT() *MockTestComponentMockRecorder[I, O] {
	return m.recorder
}

// Annotate mocks base method.
func (m *MockTestComponent[I, O]) Annotate(arg0 infer.Annotator) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Annotate", arg0)
}

// Annotate indicates an expected call of Annotate.
func (mr *MockTestComponentMockRecorder[I, O]) Annotate(arg0 any) *MockTestComponentAnnotateCall[I, O] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Annotate", reflect.TypeOf((*MockTestComponent[I, O])(nil).Annotate), arg0)
	return &MockTestComponentAnnotateCall[I, O]{Call: call}
}

// MockTestComponentAnnotateCall wrap *gomock.Call
type MockTestComponentAnnotateCall[I any, O pulumi.ComponentResource] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestComponentAnnotateCall[I, O]) Return() *MockTestComponentAnnotateCall[I, O] {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestComponentAnnotateCall[I, O]) Do(f func(infer.Annotator)) *MockTestComponentAnnotateCall[I, O] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestComponentAnnotateCall[I, O]) DoAndReturn(f func(infer.Annotator)) *MockTestComponentAnnotateCall[I, O] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Construct mocks base method.
func (m *MockTestComponent[I, O]) Construct(ctx *pulumi.Context, name, typ string, args I, opts pulumi.ResourceOption) (O, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Construct", ctx, name, typ, args, opts)
	ret0, _ := ret[0].(O)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Construct indicates an expected call of Construct.
func (mr *MockTestComponentMockRecorder[I, O]) Construct(ctx, name, typ, args, opts any) *MockTestComponentConstructCall[I, O] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Construct", reflect.TypeOf((*MockTestComponent[I, O])(nil).Construct), ctx, name, typ, args, opts)
	return &MockTestComponentConstructCall[I, O]{Call: call}
}

// MockTestComponentConstructCall wrap *gomock.Call
type MockTestComponentConstructCall[I any, O pulumi.ComponentResource] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestComponentConstructCall[I, O]) Return(arg0 O, arg1 error) *MockTestComponentConstructCall[I, O] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestComponentConstructCall[I, O]) Do(f func(*pulumi.Context, string, string, I, pulumi.ResourceOption) (O, error)) *MockTestComponentConstructCall[I, O] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestComponentConstructCall[I, O]) DoAndReturn(f func(*pulumi.Context, string, string, I, pulumi.ResourceOption) (O, error)) *MockTestComponentConstructCall[I, O] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTestHost is a mock of TestHost interface.
type MockTestHost struct {
	ctrl     *gomock.Controller
	recorder *MockTestHostMockRecorder
	isgomock struct{}
}

// MockTestHostMockRecorder is the mock recorder for MockTestHost.
type MockTestHostMockRecorder struct {
	mock *MockTestHost
}

// NewMockTestHost creates a new mock instance.
func NewMockTestHost(ctrl *gomock.Controller) *MockTestHost {
	mock := &MockTestHost{ctrl: ctrl}
	mock.recorder = &MockTestHostMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestHost) EXPECT() *MockTestHostMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockTestHost) Call(arg0 context.Context, arg1 goprovider.CallRequest, arg2 pprovider.CallFunc) (goprovider.CallResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", arg0, arg1, arg2)
	ret0, _ := ret[0].(goprovider.CallResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockTestHostMockRecorder) Call(arg0, arg1, arg2 any) *MockTestHostCallCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockTestHost)(nil).Call), arg0, arg1, arg2)
	return &MockTestHostCallCall{Call: call}
}

// MockTestHostCallCall wrap *gomock.Call
type MockTestHostCallCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestHostCallCall) Return(arg0 goprovider.CallResponse, arg1 error) *MockTestHostCallCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestHostCallCall) Do(f func(context.Context, goprovider.CallRequest, pprovider.CallFunc) (goprovider.CallResponse, error)) *MockTestHostCallCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestHostCallCall) DoAndReturn(f func(context.Context, goprovider.CallRequest, pprovider.CallFunc) (goprovider.CallResponse, error)) *MockTestHostCallCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Construct mocks base method.
func (m *MockTestHost) Construct(arg0 context.Context, arg1 goprovider.ConstructRequest, arg2 pprovider.ConstructFunc) (goprovider.ConstructResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Construct", arg0, arg1, arg2)
	ret0, _ := ret[0].(goprovider.ConstructResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Construct indicates an expected call of Construct.
func (mr *MockTestHostMockRecorder) Construct(arg0, arg1, arg2 any) *MockTestHostConstructCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Construct", reflect.TypeOf((*MockTestHost)(nil).Construct), arg0, arg1, arg2)
	return &MockTestHostConstructCall{Call: call}
}

// MockTestHostConstructCall wrap *gomock.Call
type MockTestHostConstructCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestHostConstructCall) Return(arg0 goprovider.ConstructResponse, arg1 error) *MockTestHostConstructCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestHostConstructCall) Do(f func(context.Context, goprovider.ConstructRequest, pprovider.ConstructFunc) (goprovider.ConstructResponse, error)) *MockTestHostConstructCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestHostConstructCall) DoAndReturn(f func(context.Context, goprovider.ConstructRequest, pprovider.ConstructFunc) (goprovider.ConstructResponse, error)) *MockTestHostConstructCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
